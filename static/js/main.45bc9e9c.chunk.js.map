{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createData","id","name","amount","date","rows","valuetext","value","App","handleChangeRowsPerPage","event","setState","page","rowsPerPage","parseInt","target","state","data","sortdata","sliderValue","from","to","i","array","string","newArray","filter","o","Object","keys","some","k","toString","toLowerCase","includes","this","Typography","gutterBottom","Slider","min","max","onChange","newValue","console","log","filterData","map","row","index","push","valueLabelDisplay","aria-labelledby","getAriaValueText","color","myDate","split","newDate","Date","getTime","emptyRows","Math","length","Fragment","CssBaseline","Container","maxWidth","style","marginTop","Paper","TableContainer","Table","size","aria-label","TableHead","TableRow","TableCell","TextField","type","variant","filterNameData","bind","placeholder","RangeSlider","noValidate","label","defaultValue","filterDateFrom","InputLabelProps","shrink","filterDateTo","Button","marginLeft","onClick","getDiff","TableBody","slice","height","colSpan","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","e","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45bc9e9c.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField, Button, Paper, Typography, Slider, TableRow, CssBaseline, Container, TablePagination, TableHead, TableContainer, TableCell, TableBody, Table } from '@material-ui/core';\n\nfunction createData(id, name, amount, date) {\n    return { id, name, amount, date };\n}\n\n\n// All records\nconst rows = [\n    createData(1, 'Cupcake', 305, '2020-10-12'),\n    createData(2, 'Donut', 452, '2020-10-13'),\n    createData(3, 'Eclair', 262, '2020-10-14'),\n    createData(4, 'Frozen yoghurt', 159, '2020-10-15'),\n    createData(5, 'Gingerbread', 356, '2020-10-16'),\n    createData(6, 'Honeycomb', 408, '2020-10-17'),\n    createData(7, 'Ice cream sandwich', 237, '2020-10-18'),\n    createData(8, 'Jelly Bean', 375, '2020-10-19'),\n    createData(9, 'KitKat', 518, '2020-10-20'),\n    createData(10, 'Lollipop', 392, '2020-10-21'),\n    createData(11, 'Marshmallow', 318, '2020-10-22'),\n    createData(12, 'Nougat', 360, '2020-10-23'),\n    createData(13, 'Oreo', 437, '2020-10-24'),\n];\n\nfunction valuetext(value) {\n    return `${value}`;\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            page: 0,\n            rowsPerPage: 10,\n            data: rows,\n            sortdata: rows,\n            sliderValue: 10,\n            value: [100, 300],\n            from: 0,\n            to: 0\n        }\n    }\n\n    // Filter the text box  by latter and name\n    filterNameData(event, i) {\n        let array = rows;\n        let string = event.target.value;\n        let newArray = array.filter((o) =>\n            Object.keys(o).some((k) =>\n                o[k].toString().toLowerCase().includes(string.toLowerCase())\n            )\n        );\n        this.setState({ data: newArray })\n    }\n\n    // getting 10 rows per page\n    handleChangeRowsPerPage = (event) => {\n        this.setState({\n            page: 0,\n            rowsPerPage: parseInt(event.target.value, 10)\n        })\n    };\n\n    // filter range by amount\n    RangeSlider() {\n        const handleChange = (event, newValue) => {\n            console.log(newValue)\n            this.setState({ value: newValue });\n            let filterData = [];\n            rows.map((row, index) => {\n                if (row.amount > newValue[0] && row.amount < newValue[1]) {\n                    filterData.push(row);\n                }\n            })\n            this.setState({ data: filterData })\n        };\n\n        return (\n            <div>\n                <Typography id=\"range-slider\" gutterBottom>\n                    <span>Amount Filter<span>(&#8377;)</span>\n                    </span>\n                </Typography>\n                <Slider\n                    value={this.state.value}\n                    min={100}\n                    max={1000}\n                    onChange={handleChange}\n                    valueLabelDisplay=\"auto\"\n                    aria-labelledby=\"range-slider\"\n                    getAriaValueText={valuetext}\n                    color=\"secondary\"\n                />\n            </div>\n        );\n    }\n\n    //filter from\n    filterDateFrom(event) {\n        var myDate = event.target.value;\n        myDate = myDate.split(\"-\");\n        var newDate = new Date(myDate[2], myDate[1] - 1, myDate[0]);\n        this.setState({ from: newDate.getTime() })\n    }\n\n    // filter to\n    filterDateTo(event) {\n        var myDate = event.target.value;\n        myDate = myDate.split(\"-\");\n        var newDate = new Date(myDate[2], myDate[1] - 1, myDate[0]);\n        this.setState({ to: newDate.getTime() })\n    }\n\n    // convert into timestamp and checking between condtion of date\n    getDiff(from, to) {\n        let filterData = [];\n        rows.map((row, index) => {\n            var myDate = row.date;\n            myDate = myDate.split(\"-\");\n            var newDate = new Date(myDate[2], myDate[1] - 1, myDate[0]);\n            if (newDate.getTime() >= from && newDate.getTime() <= to) {\n                filterData.push(row);\n            }\n        })\n        this.setState({\n            data: filterData\n        })\n    }\n\n    render() {\n        const { page, rowsPerPage, data, from, to } = this.state;\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n        const handleChangePage = (event, newPage) => { this.setState({ page: newPage }) };\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <Container maxWidth=\"xl\" style={{ marginTop: '20px' }}>\n                    <div >\n                        <Paper >\n                            <TableContainer>\n                                <Table\n\n                                    aria-labelledby=\"tableTitle\"\n                                    size={'small'}\n                                    aria-label=\"enhanced table\"\n                                >\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell></TableCell>\n                                            <TableCell><TextField type=\"search\" size=\"small\" variant=\"outlined\" onChange={this.filterNameData.bind(this)} placeholder=\"search\" /></TableCell>\n                                            <TableCell>{this.RangeSlider()}</TableCell>\n                                            <TableCell>\n                                                <form noValidate>\n                                                    <TextField\n                                                        id=\"date\"\n                                                        label=\"From\"\n                                                        type=\"date\"\n                                                        defaultValue=\"2020-10-14\"\n                                                        onChange={this.filterDateFrom.bind(this)}\n                                                        InputLabelProps={{\n                                                            shrink: true,\n                                                        }}\n                                                    />\n                                                    <span></span>\n                                                    <TextField\n                                                        id=\"date\"\n                                                        label=\"To\"\n                                                        type=\"date\"\n                                                        defaultValue=\"2020-10-24\"\n                                                        onChange={this.filterDateTo.bind(this)}\n                                                        InputLabelProps={{\n                                                            shrink: true,\n                                                        }}\n                                                    />\n                                                    <Button style={{ marginTop: '15px', marginLeft: '10px' }} onClick={() => this.getDiff(from, to)} variant=\"contained\" color=\"secondary\" size=\"small\">Filter Date</Button>\n                                                </form>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>ID</TableCell>\n                                            <TableCell>Name</TableCell>\n                                            <TableCell>Amount</TableCell>\n                                            <TableCell>Date</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {data\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row, index) => {\n\n                                                return (\n                                                    <TableRow>\n                                                        <TableCell>{row.id}</TableCell>\n                                                        <TableCell>{row.name}</TableCell>\n                                                        <TableCell >{row.amount}</TableCell>\n                                                        <TableCell >{row.date}</TableCell>\n                                                    </TableRow>\n                                                );\n                                            })}\n                                        {emptyRows > 0 && (\n                                            <TableRow style={{ height: (33) * emptyRows }}>\n                                                <TableCell colSpan={6} />\n                                            </TableRow>\n                                        )}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10]}\n                                component=\"div\"\n                                count={data.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={(e) => this.handleChangeRowsPerPage(e)}\n                            />\n                        </Paper>\n                    </div>\n                </Container>\n            </React.Fragment >\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}